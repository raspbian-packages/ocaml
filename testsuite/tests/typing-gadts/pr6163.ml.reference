
#     type _ nat = Zero : [ `Zero ] nat | Succ : 'a nat -> [ `Succ of 'a ] nat
# type 'a pre_nat = [ `Succ of 'a | `Zero ]
#   type aux =
    Aux :
      [ `Succ of [< [< [< [ `Zero ] pre_nat ] pre_nat ] pre_nat ] ] nat -> 
      aux
#                 Characters 162-163:
    | _ -> .  (* error *)
      ^
Error: This match case could not be refuted.
       Here is an example of a value that would reach it:
       Succ (Succ (Succ (Succ (Succ Zero))))
# 
