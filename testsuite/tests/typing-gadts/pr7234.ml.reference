
# type (_, _) eq = Eq : ('a, 'a) eq | Neq : int -> ('a, 'b) eq
# type 'a t
# Characters 15-40:
  let f (type a) (Neq n : (a, a t) eq) = n;;   (* warn! *)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Eq
val f : ('a, 'a t) eq -> int = <fun>
#       Characters 58-85:
   let f (type a) (Neq n : (a, a T.t) eq) = n  (* warn! *)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
Eq
module F :
  functor (T : sig type _ t end) -> sig val f : ('a, 'a T.t) eq -> int end
# 
